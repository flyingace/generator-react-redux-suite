import <%= containerName %>, { mapStateToProps, mapDispatchToProps } from '../<%= containerName %>.jsx';
import * as <%= containerName %>ActionCreators from '../../../actions/<%= containerName %>ActionCreators.es6';

describe('<%= containerName %> container', () => {

    let sandbox;

    before(() => {
        sandbox = sinon.sandbox.create();
    });

    afterEach(() => {
        sandbox.restore();
    });

    it('should be connected to redux', () => {
        expect(<%= containerName %>.WrappedComponent).to.be.ok;
    });

    context('#mapStateToProps', () => {

        it('should return the proper state for <%= containerName %>', () => {
            const mockOriginalState = {
                FakeData: {},
                <%= containerName %>: { somekey: 'someval' }
            };
            const mockReturnedState = {
                <%= containerName %>: { somekey: 'someval' }
            };
            expect(mapStateToProps(mockOriginalState)).to.deep.equal(mockReturnedState);
        });

    });

    context('#mapDispatchToProps', () => {
        let mappedDispatch, dispatchStub;

        before(() => {
            dispatchStub = sandbox.stub();
            mappedDispatch = mapDispatchToProps(dispatchStub);
        });

<% for(var i = 0, z = actions.length; i < z; i++) { -%>
        context('`handle<%= actions[i].actionFuncProper -%>`', () => {
            it('should have an action `handle<%= actions[i].actionFuncProper -%>`', () => {
                expect(mappedDispatch.actions.handle<%= actions[i].actionFuncProper -%>).to.be.a.function;
            });

            it('should call its respective action creator', () => {
                sandbox.stub(<%= containerName %>ActionCreators, '<%- actions[i].actionFunc -%>');
                const data = { somekey: 'some val' };
                mapDispatchToProps(dispatchStub).actions.handle<%= actions[i].actionFuncProper -%>(
                    // replace with params expected by function, if any. use values from `data` const.
                );
                expect(<%= containerName %>ActionCreators.<%- actions[i].actionFunc -%>).to.have.been.calledOnce;
                expect(<%= containerName %>ActionCreators.<%- actions[i].actionFunc -%>).to.have.been.calledWithExactly(
                    // replace with params expected by function (if any... or omit this expect() statement)
                    // use values from `data` const.
                );
            });
        });

<% } -%>
    });

});
